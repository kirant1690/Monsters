{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","Response","json","users","this","filterMonster","filter","monsters","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TACaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCFbC,G,MAAW,SAAAR,GAEpB,OADAS,QAAQC,IAAIV,GACN,qBAAKC,UAAU,YAAf,SACND,EAAMI,QAAQO,KAAI,SAAAP,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCNbO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACAC,KAAK,SACLd,UAAU,SACVY,YAAaA,EACbG,SAAUF,MCkCCG,E,kDAlCb,aAAc,IAAD,8BACf,gBAYEH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAZxC,EAAKC,MAAQ,CACXnB,QAAS,GACTgB,YAAa,IAJA,E,qDAQb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEf,QAAUwB,S,oBAK3C,WACE,MAAgCC,KAAKN,MAA7BnB,EAAR,EAAQA,QAASgB,EAAjB,EAAiBA,YACXU,EAAgB1B,EAAQ2B,QAAO,SAAAC,GAAQ,OAAIA,EAAS1B,KAAK2B,cAAcC,SAASd,EAAYe,wBAElG,OACE,sBAAKlC,UAAU,MAAf,UACE,kDAEH,cAAC,EAAD,CAAWY,YAAY,iBACvBC,aAAce,KAAKf,eAEnB,cAAC,EAAD,CAAUV,QAAW0B,W,GA5BRM,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.13579d19.chunk.js","sourcesContent":["import './card.styles.css';\nexport const Card = (props) => (\n    <div className='card-container'>\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n)","import { Card } from '../card/card.component';\nimport './card-list.styles.css';\n\nexport const CardList = props => {\n    console.log(props);\n    return<div className=\"card-list\"> \n   {props.monster.map(monster => (\n       <Card key={monster.id} monster={monster}/>\n   ))}\n    </div>\n}","import './search-box.styles.css';\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input \n    type='search'\n    className=\"search\" \n    placeholder={placeholder}\n    onChange={handleChange}\n    />\n);","import { Component } from 'react';\nimport  './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component{\n  constructor(){\nsuper();\nthis.state = {\n  monster: [],\n  searchField: ''\n}\n// this.handleChange = this.handleChange.bind(this);\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(Response => Response.json())\n    .then(users => this.setState({ monster : users}))\n  }\n  handleChange = e => {\n    this.setState({searchField:e.target.value})\n  }\n  render(){\n    const { monster, searchField} = this.state;\n    const filterMonster = monster.filter(monsters => monsters.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n      );\n    return(\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n     {/* <input type='search' placeholder=\"search monster\" onChange={e => this.setState({searchField:e.target.value})}/> */}\n     <SearchBox placeholder=\"search monster\"\n     handleChange={this.handleChange}\n     />\n     <CardList monster = {filterMonster}/>\n     \n    </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}